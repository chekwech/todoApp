{"version":3,"sources":["TodoBanner.js","TodoCreater.js","TodoRow.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","render","className","props","name","tasks","filter","t","done","length","Component","TodoCreater","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","callback","state","onChange","onClick","TodoRow","item","action","type","checked","VisibilityControl","ClassName","isChecked","e","description","App","task","todoItems","find","localStorage","setItem","JSON","stringify","toggleTodo","todo","map","todoTableRows","doneValue","key","componentDidMount","data","getItem","parse","userName","showCompleted","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39a52fe1.chunk.js","sourcesContent":["import React,  { Component } from 'react';\r\n\r\nexport class TodoBanner extends Component {\r\n    render = () =>\r\n    <h4 className=\"bg-primary text-white text-center p-2\">\r\n        { this.props.name }'s To Do List\r\n        ({ this.props.tasks.filter(t => !t.done).length } items to do)\r\n    </h4>\r\n}","import React, { Component } from 'react';\r\n\r\nexport class TodoCreater extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { newItemText: \"\"}\r\n        \r\n    }\r\n\r\n    updateNewTextValue = (event) => {\r\n        this.setState({ newItemText: event.target.value});\r\n    }\r\n\r\n    createNewTodo = () => {\r\n        this.props.callback(this.state.newItemText);\r\n        this.setState({ newItemText: \"\"});\r\n    }\r\n\r\n    render =() =>\r\n    <div className=\"my-1\">\r\n        <input className=\"form-control\" value={ this.state.newItemText }\r\n        onChange={ this.updateNewTextValue }/>\r\n        <button className=\"btn btn-primary mt-1\"\r\n        onClick={ this.createNewTodo }>Add</button>\r\n    </div>\r\n}","import React, { Component } from 'react';\r\nexport class TodoRow extends Component {\r\n    render = () =>\r\n         <tr> \r\n             <td>{ this.props.item.action}</td>\r\n             <td>\r\n                 <input type=\"checkbox\" checked={ this.props.item.done }\r\n                 onChange={ () => this.props.callback(this.props.item) }\r\n                 />\r\n             </td>\r\n         </tr>\r\n}","import React, { Component } from \"react\";\r\n\r\nexport class VisibilityControl extends Component {\r\n    render = () =>\r\n    <div className=\"form-check\">\r\n        <input ClassName=\"form-check-input\" type=\"checkbox\"\r\n        checked={ this.props.isChecked }\r\n        onChange={ (e) => this.props.callback(e.target.checked) } />\r\n        <label className=\"form-check-label\">\r\n            Show { this.props.description }\r\n        </label>\r\n    </div> \r\n}","import React, { Component } from 'react';\nimport { TodoBanner } from \"./TodoBanner\";\nimport { TodoCreater } from \"./TodoCreater\";\nimport { TodoRow } from \"./TodoRow\";\nimport { VisibilityControl } from \"./VisibilityControl\";\n\nexport default class App extends Component {\n\nconstructor(props) {\n    super(props);\n    this.state = {\n      userName: \"Emma\",\n      todoItems: [{action: \"Buy Flowers\", done: false },\n                  {action: \"Get Shoes\", done: false},\n                  {action: \"Collect Tickets\", done: false },\n                  {action: \"Call Joe\", done: false}],\n                  showCompleted: true\n    }\n  }\n\n  updateNewTextValue = (event) => {\n    this.setState({ newItemText: event.target.value});\n  }\n\n  createNewTodo = (task) => {\n    if (!this.state.todoItems.find(item => item.action === task)) {\n                this.setState({\n                     todoItems: [...this.state.todoItems,\n                    {action: task, done: false }]\n                     }, () => localStorage.setItem(\"todos\", JSON.stringify(this.state)));\n              }\n  }\n  toggleTodo =(todo) => this.setState({todoItems:\n  this.state.todoItems.map(item => item.action ===todo.action\n    ? { ...item, done: !item.done } : item )});\n\n    todoTableRows = (doneValue) => this.state.todoItems\n    .filter(item => item.done === doneValue).map(item =>\n      <TodoRow key={ item.action } item={ item } callback={ this.toggleTodo } />)\n    \n      \n      componentDidMount = () => {\n        let data = localStorage.getItem(\"todos\");\n        this.setState(data != null\n          ? JSON.parse(data)\n          : {\n            userName: \"Adam\",\n            todoItems: [{action: \"Buy Flowers\", done: false },\n                        {action: \"Get Shoes\", done: false},\n                        {action: \"Collect Tickets\", done: true },\n                        {action: \"Call Joe\", done: true}],\n              showCompleted: true\n          });\n      }\n  \n  render = () =>\n      <div>\n        <TodoBanner name={ this.state.userName } tasks={this.state.todoItems } />\n        <div className=\"container-fluid\">\n        <TodoCreater callback={ this.createNewTodo } />\n        <table className=\"table table-striped table-bordered\">\n          <thead>\n            <tr><th>Description</th><th>Done</th></tr>\n          </thead>\n          <tbody>{this.todoTableRows(false) }</tbody>\n        </table>\n        <div className=\"bg-secondary text-white text-center p-2\">\n          <VisibilityControl description=\"Completed Tasks\"\n          isChecked={this.state.showCompleted}\n          callback={ (checked) =>\n          this.setState({ showCompleted: checked })} />\n        </div>\n\n        { this.state.showCompleted &&\n        <table className=\"table table-striped table-bordered\">\n          <thead>\n            <tr><th>Description</th><th>Done</th></tr>\n            </thead>\n            <tbody>{ this.todoTableRows(true) }</tbody>\n            </table>\n            }\n      </div>\n      </div>\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}